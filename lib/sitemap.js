'use strict';

var ___ = require('lodash'),
    builder = require('xmlbuilder'),
    fs = require('fs'),
    Q = require('q'),
    utils = require('./utils'),
    xml2js = require('xml2js');


var sitemapFile = 'sitemap.xml';


function getSitemap(ignoreENOENT) {

    utils.log.verbose('Returning local ' + sitemapFile + ' in JSON format. \n');

    var deferred = Q.defer(),
        pages = [],
        parser = new xml2js.Parser();


    fs.readFile(sitemapFile, function(err, sitemapData) {

        if (err) {
            // file doesn't exist
            if( err.errno === -2 && ignoreENOENT){
                deferred.resolve(false);
            }
            else{
               utils.q.throwError(deferred, err);
            }
        }

        parser.parseString(sitemapData, function(err, result) {

            if (err) {
                utils.q.throwError(deferred, err);
            } else if (result.urlset && Array.isArray(result.urlset.url)) {

                pages = result.urlset.url.map(function(item) {
                    return item.loc[0];
                });

                deferred.resolve(pages);
            }
        });
    });

    return deferred.promise;
}


/**
 * Write the XML file.
 *
 * @param  {Function} callback Callback function to execute
 */
function writeSitemapXML(crawledLinks, callback) {

    var ignoreENOENT = true,
        sitemap,
        xml = builder.create('urlset', { version: '1.0', encoding: 'UTF-8' })
        .commentAfter('XML Sitemap generated by devopsgroup.io/Siteshooter')
        .att('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance')
        .att('xmlns:image', 'http://www.google.com/schemas/sitemap-image/1.1')
        .att('xsi:schemaLocation', 'http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd')
        .att('xmlns', 'http://www.sitemaps.org/schemas/sitemap/0.9');



    return getSitemap(ignoreENOENT).then(function(sitemapData) {

        // sitemap.xml file exist?
        if( sitemapData ){

            if( ___.difference(crawledLinks, sitemapData).length === 0 ){

                utils.log.log('');
                utils.log.log(utils.log.chalk.yellow.bold(' ⤷ No updates to: '), utils.log.chalk.yellow(sitemapFile));
                utils.log.log(utils.log.chalk.green.bold('   ✔︎ Total urls:'), utils.log.chalk.green(sitemapData.length));

                return callback(null);
            }
            else{

                crawledLinks = sitemapData.concat(___.difference(crawledLinks, sitemapData));

                utils.log.log('');
                utils.log.log(utils.log.chalk.yellow.bold(' ⤷ Updating '), utils.log.chalk.yellow(sitemapFile));
                utils.log.log(utils.log.chalk.green.bold('   ✔︎ New urls added:'), utils.log.chalk.green(___.difference(crawledLinks, sitemapData).length));
                utils.log.log(utils.log.chalk.green.bold('   ✔︎ Total urls:'), utils.log.chalk.green(crawledLinks.length));
            }

        }
        else{
            utils.log.log('');
            utils.log.log(utils.log.chalk.yellow.bold(' ⤷ Saving '), utils.log.chalk.yellow(sitemapFile));
            utils.log.log(utils.log.chalk.green.bold('   ✔︎ New urls added:'), utils.log.chalk.green(crawledLinks.length));
        }

        ___.forIn(crawledLinks, function(url) {
            xml.ele('url')
                .ele({
                loc: url,
                changefreq: 'weekly'
            });
        });

        sitemap = xml.end({ pretty: true, indent: '  ', newline: '\n' });

        fs.writeFile(sitemapFile, sitemap, function(err) {
            if (typeof callback === 'function') {
                return callback(err);
            }
            return err;
        });

    }).catch(function(error) {
        return callback(error);
    });
}


/**
 * Delete local sitemap.xml file
 * @author Steven Britton
 * @date   2016-04-12
 * @return {[type]}   [description]
 */
function sitemapDelete() {

    var deferred = Q.defer();

    function deleteFile(sitemap, callback) {
        fs.unlink(sitemap, function(err) {

            if (typeof callback === 'function') {
                return callback(err, sitemap);
            }
            return err;
        });
    }

    deleteFile(sitemapFile, function(err, sitemap) {
        if (err) {
            utils.q.throwError(deferred, err);
        } else {
            utils.log.log(utils.log.chalk.green.bold('✔︎ '), utils.log.chalk.yellow(sitemap, ' was successfully deleted.'));
            deferred.resolve();
        }
    });

    return deferred.promise;

}


module.exports ={
    get: getSitemap,
    delete: sitemapDelete,
    writeXML: writeSitemapXML
};

'use strict';

var ___ = require('lodash'),
    builder = require('xmlbuilder'),
    config = require('./config'),
    fs = require('fs'),
    path = require('path'),
    Q = require('q'),
    utils = require('./utils'),
    xml2js = require('xml2js');



function getSitemap(ignoreENOENT) {

    utils.log.verbose('Returning local sitemap.xml in JSON format.');

    var deferred = Q.defer(),
        parser = new xml2js.Parser();

    // cache pages
    if(config.pages){
        utils.log.verbose('Using cached sitemap JSON object.');
        deferred.resolve(config.pages);
    }



    fs.readFile(path.join(config.process.get('working_directory'), 'sitemap.xml'), function(err, sitemapData) {

        if (err) {
            // file doesn't exist
            if (err.errno === -2 && ignoreENOENT) {
                deferred.resolve([]);
            } else {
                utils.q.throwError(deferred, err);
            }
        }

        parser.parseString(sitemapData, function(err, result) {

            if (err) {
                utils.q.throwError(deferred, err);
            } else if (!result) {
                deferred.resolve([]);
            } else if (result.urlset && Array.isArray(result.urlset.url)) {

                config.pages = result.urlset.url.map(function(item) {
                    return item.loc[0];
                });

                deferred.resolve(config.pages);
            }
        });
    });

    return deferred.promise;
}



/**
 * Write the XML file
 * @param  {Array}    crawledLinks
 * @param  {Function} callback
 * @return {Function} callback
 */
function writeSitemapXML(crawledLinks, callback) {

    var ignoreENOENT = true,
        newSitemapLinks = [];


    return getSitemap(ignoreENOENT).then(function(sitemapData) {

        // https://lodash.com/docs/#difference
        newSitemapLinks = ___.difference(crawledLinks, sitemapData);

        // don't overwrite sitemap file, just append new links to the end
        return utils.executeWhen(newSitemapLinks.length !== 0, function() {

            var xml = builder.create('urlset', { version: '1.0', encoding: 'UTF-8' })
                .commentAfter('XML Sitemap generated by devopsgroup.io/Siteshooter')
                .att('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance')
                .att('xmlns:image', 'http://www.google.com/schemas/sitemap-image/1.1')
                .att('xsi:schemaLocation', 'http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd')
                .att('xmlns', 'http://www.sitemaps.org/schemas/sitemap/0.9');


            sitemapData = sitemapData.concat(newSitemapLinks);

            ___.forIn(sitemapData, function(url) {
                xml.ele('url')
                    .ele({
                        loc: url,
                        changefreq: 'weekly'
                    });
            });

            return utils.writeFile(path.join(config.process.get('working_directory'), 'sitemap.xml'), xml.end({ pretty: true, indent: '  ', newline: '\n' }));

        }).then(function(){
            return {'sitemapData': sitemapData, 'newLinks': newSitemapLinks.length};
        });

    }).catch(function(error) {
        return callback(error);
    }).done(function(data) {

        var duplicateURLs = utils.getArrayDuplicateValues(data.sitemapData);


        utils.log.log('');
        utils.log.log(utils.log.chalk.yellow.bold(' â¤· sitemap.xml'));
        utils.log.log(utils.log.chalk.green.bold('   links added:    '), utils.log.chalk.green(data.newLinks));
        utils.log.log(utils.log.chalk.green.bold('   total links:    '), utils.log.chalk.green(crawledLinks.length));
        utils.log.log(utils.log.chalk.green.bold('   duplicate links:'), utils.log.chalk.green(duplicateURLs.length));

        ___.sortBy(duplicateURLs).map(function(item){
            utils.log.log('  ', utils.log.chalk.red(item));
        });


        return callback(null);

    });
}



module.exports = {
    get: getSitemap,
    writeXML: writeSitemapXML
};
